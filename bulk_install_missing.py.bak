#!/usr/bin/env python3
import os, re, subprocess, sys
from pathlib import Path

ROOT = Path("idsideAI_Complete_PyCharm_Ready")
if not ROOT.exists():
    print("Run from repo root."); sys.exit(1)

ALIASES = {
    "jose": "python-jose[cryptography]",
    "prometheus_client": "prometheus-client",
    "neo4j": "neo4j",
    "stripe": "stripe",
    "python_dotenv": "python-dotenv",
    "python_multipart": "python-multipart",
    "docx": "python-docx",
    "pptx": "python-pptx",
    "xlsxwriter": "XlsxWriter",
    "pydantic_settings": "pydantic-settings",
    "yaml": "PyYAML",
}

EXCLUDE_DIRS = {".venv","__pycache__","node_modules",".idea",".ruff_cache",".mypy_cache",".git","qc"}

import_re = re.compile(r'^\s*(?:from\s+([\w\.]+)\s+import|import\s+([\w\.]+))')

mods: set[str] = set()
for py in ROOT.rglob("*.py"):
    if any(part in EXCLUDE_DIRS for part in py.parts):
        continue
    try:
        for line in py.read_text(encoding="utf-8", errors="ignore").splitlines():
            m = import_re.match(line)
            if not m:
                continue
            pkg = (m.group(1) or m.group(2)).split(".")[0]
            if pkg:
                mods.add(pkg)
    except Exception:
        pass

# stdlib / local ignores
IGNORE = {
    "typing","typing_extensions","os","sys","re","json","time","pathlib","dataclasses","datetime",
    "subprocess","hashlib","logging","functools","itertools","uuid","base64","math","random","statisti    "subprocess","hashlio","concurrent","io","csv","zipfile","tarfile","shutil","textw    "subprocess","hashlib","logging","funcl","html","getpass","argparse","types","enum","contextlib","importlib","glob",
    "pprint","signal","inspect","traceback","collections","ast","builtins",
    # local package roots:
    "backend","app","idsideai","idsideAI_Complete_PyCharm_Ready",
}
mods = {m for m in mods if m not in IGNORE}

# what's already installed
try:
    out = subprocess.check_output([sys.executable, "-m", "pip", "freeze"], text=True)
    installed = {ln.split("==")[0].split("@")[0].lower() for ln in out.split   es() if ln}
except Exception:
    installed = set()

to_install: list[str] = []
for m in sorted(mods):
    pip_name = ALIASES.get(m, m)
    base = pip_name.split("[")[0].lower()
    if base not in installed:
        to_install.append(pip_name)

if not to_install:
    print("âœ… Nothing new to install.")
else:
    print("ðŸ“¦ Installing:", " ".join(to_install))
    subprocess.check_call([sys.executable, "-m", "pip", "install", *to_install])
    print("âœ… Done.")
